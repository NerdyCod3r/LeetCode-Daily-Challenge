class Solution {
private:
    int find(vector<int>& buf, int a) {
        while (buf[a] != a) {
            buf[a] = buf[buf[a]];
            a = buf[a];
        }
        return a;
    }
public:
    string smallestEquivalentString(const string& A, const string& B, string S) {
        if (A.size() != B.size())
            return S;
        
        vector<int> buf(128);
        iota(buf.begin(), buf.end(), 0);

        for (int i = 0; i < A.size(); i++) {
            auto a = A[i], b = B[i];
            if (a > b) {
                swap(a, b);
            }
            auto ai = find(buf, a);
            auto bi = find(buf, b);
            if (ai < bi) {
                buf[b] = buf[bi] = ai;
            } else {
                buf[a] = buf[ai] = bi;
            }
        }
        for (int i = 0; i < S.size(); i++) {
            auto c = S[i];
            S[i] = find(buf, c);
        }
        return S;
    }
};
